@typeparam TModel

<CascadingValue Value="@this">
    <table class="table table-auto">
        <thead>
        <tr>
            @GridHeaders
        </tr>
        </thead>
        <tbody>
        @foreach (var model in ModelList)
        {
            <CascadingValue Value="@model">
                <tr>
                    @GridRowTemplate(model)
                </tr>
            </CascadingValue>
        }
        </tbody>
    </table>
</CascadingValue>

@code {
    [Parameter] public IReadOnlyCollection<TModel> ModelList { get; set; } = default!;
    [Parameter] public RenderFragment GridHeaders { get; set; } = null!;
    [Parameter] public RenderFragment<TModel> GridRowTemplate { get; set; } = null!;

    public readonly Dictionary<string, bool> SortProperties = new();

    public void SortBy(string propertyName)
    {
        if (string.IsNullOrEmpty(propertyName))
        {
            return;
        }

// If the key is not yet present, add it and set it to true (ascending)
        if (SortProperties.TryAdd(propertyName, true))
        {
        }
// If the key is already set and is set to false, we have clicked for the third time, so we want to remove it from the sorting
        else if (!SortProperties[propertyName])
        {
            SortProperties.Remove(propertyName);
        }
// Else we just toggle the value to sort descending
        else
        {
            SortProperties[propertyName] = false;
        }

        if (!SortProperties.Any())
        {
            return;
        }

        var modelQueryable = ModelList.AsQueryable();

        var firstSort = SortProperties.First();
        var property = typeof(TModel).GetProperty(propertyName);
        if (property == null)
        {
            return;
        }

        if (firstSort.Value)
        {
            modelQueryable = modelQueryable.OrderBy(x => property.GetValue(x));
        }
        else
        {
            modelQueryable = modelQueryable.OrderByDescending(x => property.GetValue(x));
        }

        foreach (var sortProperty in SortProperties.Skip(1))
        {
            Console.WriteLine($"Sorting by: {sortProperty.Key} {sortProperty.Value}");

            if (sortProperty.Value)
            {
                modelQueryable = ((IOrderedQueryable<TModel>)modelQueryable).ThenBy(x => property.GetValue(x));
            }
            else
            {
                modelQueryable = ((IOrderedQueryable<TModel>)modelQueryable).ThenByDescending(x => property.GetValue(x));
            }
        }

        ModelList = modelQueryable.ToList();

        StateHasChanged();
    }

}