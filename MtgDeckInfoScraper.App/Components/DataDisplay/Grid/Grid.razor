@typeparam TModel

<CascadingValue Value="@this">
    <table class="table table-zebra w-full">
        <thead>
        <tr>
            @GridHeaders
        </tr>
        </thead>
        <tbody>
        @foreach (var model in ModelList)
        {
            <CascadingValue Value="@model">
                <tr>
                    @GridRowTemplate(model)
                </tr>
            </CascadingValue>
        }
        </tbody>
    </table>
</CascadingValue>

@code {
    [Parameter] public IReadOnlyCollection<TModel> ModelList { get; set; } = default!;
    [Parameter] public RenderFragment GridHeaders { get; set; } = null!;
    [Parameter] public RenderFragment<TModel> GridRowTemplate { get; set; } = null!;

    public string SortProperty = string.Empty;
    public bool SortAscending = true;

    public void SortBy(string propertyName)
    {
        if (string.IsNullOrEmpty(propertyName))
        {
            return;
        }

        if (!string.Equals(SortProperty, propertyName))
        {
            SortProperty = propertyName;
            SortAscending = true;
        }
        else if (SortAscending) // Reverse sort direction on double click 
        {
            SortAscending = false;
        }
        else // Disable sorting if we clicked on the same column three times 
        {
            SortProperty = string.Empty;
        }

        var modelQueryable = ModelList.AsQueryable();

        var property = typeof(TModel).GetProperty(propertyName);
        if (property == null)
        {
            return;
        }

        modelQueryable = SortAscending ?
            modelQueryable.OrderBy(x => property.GetValue(x)) :
            modelQueryable.OrderByDescending(x => property.GetValue(x));

        ModelList = modelQueryable.ToList();

        StateHasChanged();
    }

}