@page "/"
@using System.Globalization
@using MtgDeckInfoScraper.App.LocalStorage
@using MtgDeckInfoScraper.Scraping
@using MtgDeckInfoScraper.Scraping.Models
@using MtgDeckInfoScraper.Scraping.Options
@using MtgDeckInfoScraper.App.Components.Headers

<PageHeader Title="Moxfield"/>

<div class="mb-5 space-y-4">
    <div class="form-control">
        <label class="label">
            <span class="label-text">Decklist URL</span>
        </label>
        <input id="url" type="text" @bind="_url" placeholder="Provide a URL to a deck list"
               class="input input-bordered"/>
    </div>
    <div class="form-control">
        <label class="label">
            <span class="label-text">Scrape Count</span>
        </label>
        <input id="scrapeCount" type="number" class="input input-bordered" @bind="_scrapeCount"/>
    </div>
    <button class="btn btn-secondary w-full" @onclick="ScrapeDeckList" type="submit">Scrape</button>
</div>

@if (_deckList.Count > 0)
{
    <h2 class="text-2xl font-bold mb-5">Scrape Results (@_deckList.Count)</h2>

    @if (!string.IsNullOrEmpty(_errorMessage))
    {
        <div>
            <p class="text-error font-bold">@_errorMessage</p>
        </div>
    }

    <Grid ModelList="_deckList">
        <GridHeaders>
            <GridHeader TModel="DeckInfo" PropertyName="@nameof(DeckInfo.Title)" Sortable="@true">
            </GridHeader>
            <GridHeader TModel="DeckInfo" PropertyName="@nameof(DeckInfo.Price)" Sortable="@true">
            </GridHeader>
            <GridHeader TModel="DeckInfo" PropertyName="@nameof(DeckInfo.Likes)" Sortable="@true">
            </GridHeader>
            <GridHeader TModel="DeckInfo" PropertyName="@nameof(DeckInfo.Views)" Sortable="@true">
            </GridHeader>
            <GridHeader TModel="DeckInfo" PropertyName="@nameof(DeckInfo.LastUpdated)">
            </GridHeader>
        </GridHeaders>
        <GridRowTemplate>
            <td>
                <a href="@context.Url" target="_blank" class="hover:underline text-primary">
                    <span class="mr-2">
                        @context.Title
                    </span>
                    <i class="fa-solid fa-link"></i>
                </a>
            </td>
            <td>
                @context.PriceSymbol
                @context.Price.ToString(CultureInfo.InvariantCulture)
            </td>
            <td>@context.Likes.ToString()</td>
            <td>@context.Views.ToString()</td>
            <td>@context.LastUpdated</td>
        </GridRowTemplate>
    </Grid>
}

@code {
    [Inject] public DeckInfoScraperFactory DeckInfoScraperFactory { get; set; } = null!;
    [Inject] public IMtgDeckInfoScraperOptions Options { get; set; } = null!;
    [Inject] public CurrentScrapeProvider CurrentScrapeProvider { get; set; } = null!;


    private string? _url = "";
    private int _scrapeCount = 10;
    private List<DeckInfo> _deckList = new();
    private string _errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var existingDeckList = await CurrentScrapeProvider.GetCurrentScrape();
        if (existingDeckList != null)
        {
            _deckList = existingDeckList;
        }
    }


    private async Task ScrapeDeckList()
    {
        if (string.IsNullOrEmpty(_url))
        {
            return;
        }

        Console.WriteLine($"Scraping deck list {_url}");
        var scraper = DeckInfoScraperFactory.Create(SupportedSites.Moxfield);

        try
        {
            _deckList = await scraper.ScrapeDeckList(_url, _scrapeCount);
            await CurrentScrapeProvider.SetCurrentScrape(_deckList);
        }
        catch (Exception e)
        {
            _errorMessage = e.Message;
        }
    }

}
